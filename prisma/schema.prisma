// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?       @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?       @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?       @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
  leaderboards           Leaderboard[]
  userQuiz               UserQuiz[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @id @map("_id")
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Leaderboard {
  id       String @id @default(cuid()) @map("_id")
  score    Int
  maxScore Int
  quizId   String
  quiz     Quiz   @relation(fields: [quizId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@map(name: "leaderboards")
}

model Quiz {
  id           String        @id @default(cuid()) @map("_id")
  title        String
  description  String
  validFrom    DateTime?
  validTo      DateTime?
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @map(name: "updated_at")
  questions    Question[]
  leaderboards Leaderboard[]
  userQuizzes  UserQuiz[]
}

model Question {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  options   Option[]
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model Option {
  id          String     @id @default(cuid()) @map("_id")
  text        String
  type        OptionType @default(TEXT)
  isAnswer    Boolean    @default(false)
  explanation String?
  questionId  String
  question    Question?  @relation(fields: [questionId], references: [id])
}

model UserQuiz {
  id            String    @id @default(cuid()) @map("_id")
  quizId        String
  quiz          Quiz      @relation(fields: [quizId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  answers       Json
  totalQuestion Int
  startedOn     DateTime  @default(now()) @map(name: "started_on")
  endedOn       DateTime? @map(name: "ended_on")
}

enum OptionType {
  TEXT
  CODE
  INT
}
